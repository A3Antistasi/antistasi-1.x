<html>

<head>
<meta http-equiv="Content-Language" content="en-au">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>well here we are</title>
</head>

<body>

<p><font face="Arial">Rapify version 1.xx by Mikero.<br>
see readme general</font></p>
<p><font face="Arial">see fixes</font></p>
<hr>
<p><font face="Arial"><br>
Rapify will binarise files into either flashpoint or elite/arma format.<br>
<br>
The default is ARMA rapification and can be overridden on the command line to 
produce ofp format.<br>
<br>
ANY file irrespective of it's extension, can be binarised. Thus *.rvmat, *.bikb 
*.ext *.fsm, *.cpp, *.sqm<br>
<br>
<br>
Useage:<br>
<br>
Rapify [options...] whatever [wherever]<br>
<br>
<b>===Output rules===</b><br>
<br>
Rapify provides protection against overwriting the source file (since both plain 
text and bin file can have same extension)</font></p>
<p><font face="Arial">UNCONDITIONAL: *.cpp to *.bin OR</font></p>
<p><font face="Arial">&nbsp;&nbsp;&nbsp; whatever. * to&nbsp; whatever.*.bin&nbsp; 
OR </font></p>
<p><font face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; whatever .* to 
wherever\whatever.*</font></p>
<p><font face="Arial">Options are case insensitive<br>
<br>
-S silent (default)<br>
-W warnings are errors<br>
-N Noisy. show processing<br>
-L Lint check only (no save file)<br>
-E<br>
-LE Lint check with external file checking</font></p>
<p><font face="Arial">-A (default) Arma compile.<br>
-O OFP compile<br>
-X Xbox compile <br>
<br>
-P do not pause on error<br>
<br>
<b>===External File checking ===</b></font></p>
<p><font face="Arial">Requires that the external file is in the 'correct' 
location on the &lt;root&gt;: drive. This because all internal references are HARD 
WIRED to the &lt;root&gt; drive.</font></p>
<p><font face="Arial">The &lt;root&gt; drive is ordinarily P: and it means you would 
normally extract arma pbo's to achieve this miracle. (Use
<a href="https://dev-heaven.net/projects/mikero-pbodll/files">Arma2P</a> )<br>
<br>
<br>
Missions can also use relative addressing.&nbsp; There are other subtle nuances 
to missions and campaigns such as location of the ext folder, mission.sqm should 
normally be tested inside it's own package folder<br>
<br>
<br>
<b>OFP vs ARMA vs XBOX</b><br>
&nbsp;</font></p>
<p><font face="Arial">There is NO difference in plain text between the them. It 
is impossible for the dll to determine which way to compile the binary unless 
it's told how to.</font></p>
<p><font face="Arial">The <b>default</b> compile is for Arma. The -O option 
specifies OFP</font></p>
<p><font face="Arial"><br>
However. it is very, very good practice on your part to be specific, since 
future engines may use the extract same text (but their binary *might* be 
different again).</font></p>
<p><b><font face="Arial">#define _ARMA_ // <font color="#FF0000">current</font>
<font color="#FF0000">default</font> or</font></b></p>
<p><b><font face="Arial">#define _OFP_ // or</font></b></p>
<p><b><font face="Arial">#define_ XBOX_</font></b></p>
<p><font face="Arial">should be placed at the top of your config.cpp. </font>
</p>
<p><font face="Arial"><br>
(Note that the dll automatically does this for you on any tool using <b>De</b>rapify 
)</font></p>
<p><font face="Arial"><br>
Similarly the options</font></p>
<p><font face="Arial">-a // </font><b><font face="Arial"><font color="#FF0000">
current</font> <font color="#FF0000">default</font> </font></b>
<font face="Arial">arma</font></p>
<p><font face="Arial">-o // ofp</font></p>
<p><font face="Arial">-x // xbox</font></p>
<p><font face="Arial">should be specified on the command line.</font></p>
<p><font face="Arial" color="#FF0000">You have been warned.</font></p>
<p><font face="Arial"><br>
<b>XBOX ELITE</b><br>
<br>
For xbox files that require authentication keys use<br>
<br>
#define_ XBOX_<br>
<br>
The 20 key sig will be autogenerated by this application.<br>
===========================================<br>
<br>
&nbsp;</font></p>

<p><b>Warnings are errors</b></p>

<p>&nbsp;</p>

<p>access=</p>

<p>this is a reserved keyword from bis which is only ever encountered in the 
bin\config.bin</p>

<p>it is 'there' to prevent inadvertent, or malicious, alteration of base 
characteristics for the engine,</p>

<p>A common mistake is to copy pasta this token when re-creating some class 
found in bin\config.bin</p>

<p>A mod author has no reason to ever 'protect' his generated class, let alone 
alter what's there already.</p>

<p>&nbsp;</p>

<p><b>superflous ;</b></p>

<p>more than one ; has been encountered. This is acceptable in c syntax: and is 
treated as white space (ignored). Unfortunately bis binarise will crash if it 
encounters it when creating maps.</p>

<p><b>triailing , in an array</b></p>

<p>a trainling comma is in an array. This is acceptable in c syntax: and is 
treated as white space (ignored). Unfortunately bis binarise will crash if it 
encounters it when creating maps. Fsm files have this.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

</body>

</html>